I removed the static stuff in the linker settings (was causing me issues).
Sorry if it's a burden for you, maybe we can talk about it and see if 
there's a better way.

I commented out (with 3 ///) the parts of the programs that don't have
functionality just yet so we can at least run the prog while we do things.

About searching through containers (like drawing enemies and such), you 
might want to apply a check before searching (ie. container isn't empty) 
first. Specifically in CollisionManager's update function.

I also changed the way the Game header works, specifically gameRun() funct.
It just seems like it's taking over the work of main(). Rather than that, 
I'm thinking the class should be controlling the flow of the game, like
what's the current game condition(running, lost, won), levels and so on.

-Olysold

###

I added the static stuff so that running the .exe doesn't require the compiler libraries, but it's not a big deal.

I made a lot of changes before I went to bed, but forgot to sync.. oh well.

shouldn't need to check if the container is empty, since it wouldn't loop.

Yeah, I never did like the way I've seen Game handled but I couldn't think of anything better, your way is pretty nice.

-Z

###

Changed a few things but stuck on setting textures now, since animated sprites only use animations

-Z

###

Animation needs to have frames set (addFrame()). Since the process of setting up an AnimatedSprite is quite delicate,
I left it to getAnimation as the only function that will be returning anything and two other set up functions
to well, set up the animation.

Getting an OpenGl error though, called failed to Texture.cpp(95).

Thinking about the textured entities, I have two suggestions. 

1) They can either be like the textured Player I've set up, a plane-ish figure that would require the head to rotate
to the desired location. Animation would only apply when movement is made.
2) Saucer-like so there's no worry of rotation and Animation is just contantly playing.

-O

###

I'm not getting an OpenGL error, guessing you fixed it.

Rotation is easy, unless animated sprites do it differently.

I changed const shared_ptr to static because const shared_ptr doesn't make sense
shared_ptr is useless if you're not going to share it, it doesn't automatically detect all instances of the class unless its copied.
static will save space and ensure the class is dealing with the same instance of what we've static'ed
we can leave const for the sake of explicity

Bullets stats should depend on what fire it, otherwise bulletDamage of Enemy is useless, etc.

About IDC, the width limit seemed a bit pointless and since we're the only two working on it an initial is fine, don't you think?

There seems to be a problem with animated texture again, so I commented out collision manager

I've done a bit of math stuff with bullets, I forgot how annoying this was :b
~Z

###

Nah it's probably an error on my part I guess, something to do with unupdated graphics driver.

Animated sprite is exactly like sprites as far as I can tell. What I'm concerned with is how do we stop rotating it
at a given point? Like if I press D long enough, it should rotate until 90 degrees and stop. My math's bad so yeah =/,
it's probably really simple.

So I guess we should have a getter for each stat in Player and Enemy as well?

If every class has a static ResourceManager, would they each be creating different static instances of 
ResourceManager?

About IDC, I'm keeping to this limit so I don't have to use the side-scroller. I just discovered the "zen" mode up
at the header and it fixes the whole scrolling thing, so whatever floats your boat about the width limit.

I've never done math stuff with bullets, thanks for the example =)

-O

###

hmm, why would you want to stop it rotating at 90 degrees? anyway it's pretty easy
if (sprite.getRotation() <= 90 && key::D.isPressed()) rotate ship

At the moment I'm using the mousePos to set the rotation of the bullet
but I (or you, for experience) could easily change it to rotate the ship, which is how its normally done in Arena shooters.

Well, animated sprite isn't exactly the same, but yeah.

We should probably wait until we need the getter before making it.

Yeah, but the only way around that is to make ResourceManager, BulMan, etc. ah uh..
crap, forgot the word, that class which you get a reference to and can't construct, daleth made one.. interaction? security?
but static'ing a few members of ResourceManager means they will all be the same
and static'ing the resMan objects means that if I create 10 bulMan they will all point to the same resMan object, again, saving space.

Ah, I tend to just open the file up.

Yeah no problem, I should comment it and in a function or two in util.hpp

15k bullets, 67 FPS, pretty nice :b

I fixed a problem with the bullet offset, I needed to set the Origin before the Position.

I tried incorporating util::isBetween/Dir::XYZ in to player::move() but I screwed up something and gave up
personally I'm not sure if its worth it.

Okay, I have no idea why but I can't change the health of the enemy...

By the way, it's more efficient to use 'power of 2' width/height for textures, e.g 16x16, 32x32, 64x64.

It might just be me but the program crashes often with no discernible cause
callstack mentions GlobalBounds but that should be no different to previous commit

~Z

###

I think I know how to recreate the error you're getting where the prog crashes. Search around for enemies that are
overlapping each other then shoot them in the middle. Apparently it's killing more than one in one go. I left a
running comment updating score on each enemy kill so you can see for yourself.

Also, why is CollisionManager working on its' own copies of BulletManager and EnemyManager? Anything done to them
does not translate to those in main. The score isn't rising because of this reason.

-O

###

Just did a small update to make the enemies move. Trying to continuously iterate through the vector while erasing
elements doesn't seem to be working out (enemies dying). I didn't sync the change to collisionManager, but a fix 
to that is to break out the loop upon collision.

I don't know if there are any unseen implications though, like enemies not getting processed between nanoseconds upon 
death. But I don't think enemies will be dying in such rapid fashion and that wouldn't be a problem. Maybe you
have another solution, so I left collisionManager the way it is.

Currently enemy rotation is a direct copy and paste from your code. Something about it makes the enemy stutter, I think
they are rotating too fast. I'll look into that.

-O

###

Managed to make them rotate, but I used 100 as the speed for ccw rotation. I'm not sure what the current speed value is
for enemies at the moment, but it's making the enemies spaz out on ccw rotations. Or maybe it's not the value, there's
just something about using m_speed that's making them spaz out.

In the update, spawner is optional. I was just thinking that spawning is a big enough task that it should have it's
own place to work in. Didn't remove anything though, just commented out arena's update.

I'm also trying to make the first enemy type move in a certain way. The enemy will have to rotate until it's sort
of pointing towards the player, then "dash" in a straight line, or rather on a vector between the enemy's current
position and the player's "ghost" position; then rinse and repeat. It's called testMove for now. Will try to figure 
it out later, any ideas?

Edit: Sort of figured out the movement. Eventually I'll try to get it to move at a constant speed. Finally figured
out why m_speed wasn't working correctly with rotation, totally forgot about unsigned. 


-O

###

Sorry I haven't been active, been a really busy several weeks and gonna continue being busy for awhile. I'll try to
update when I can.

-O
